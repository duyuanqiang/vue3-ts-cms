我写代码的原则：
１）尽可能不写代码。写得越少，bug就越少。
２）尽可能不修改既成的代码。修改得越多，新bug出现的可能性就越大。
３）试图在１）和２）之间谋求平衡，以求最省事。



游戏配置,协议:ssh://git@git.h333.me:8022/XH-Server/public.git
登陆地址:https://git.h333.me/
git：player038@a8888.me  player038

邮箱：https://mail.name.com/

ftp: 192.168.1.49:5001

有度 player038 
密码 player038

有度新地址43.132.181.147

ip 10.1.1.119

推视频地址 http://119.28.68.126/#/newsManager/matchManager
账号密码bianji
测试地址 https://demo.unified-streaming.com/video/tears-of-steel/tears-of-steel.ism/.m3u8

禅道：player038 player038123456 
新禅道：
新禅道地址 ：  http://52.197.255.220/zentao/my/
hamigua
hamigua123456
 
C:\ProgramData\Microsoft\Windows\Start Menu\Programs\TortoiseGitsvn duyuanqiang d123456

这个是QA服的服务器配置：

 CONF.channelId = "205790_38";
 CONF.agentId = "667";
 CONF.shareId = "205790_38"; 
 CONF.svrUrl = "https://www.qilinziguan.net:1000/";

前端H5连接方式  CONF.svrUrl = "http://192.168.1.xx:8611";

49混服 渠道号：149856_107   代理：73
49独服 渠道号：942230_8   代理：71

混服 https://www.dfhsffg.com/501736_3
独服 https://www.dfhsffg.com/501736_3
git branch --set-upstream-to=origin/远程分支的名字 本地分支的名字 

先问清楚需求再开发！！！

问清楚分支再开发，数据没返回也可能是服务器的问题。先看看协议。不要呆呆的等着。

明确时间任务。

看看文件再开发，提交是否成功

人是活的，可能有很多可能。

回退之后，push一下。再修改。

git远端有变化就要pull，本地有变化就要push。

连等赋值真正的运算规则是  B = C; A = B;  即连续赋值是从右至左永远只取等号右边的表达式结果赋值到等号左侧。

local下按shift+右键  点击在此窗口打开命令行  输入 http-server  获取端口号
在浏览器中输入http://localhost:端口号/index.html 即可打开多个窗口。

数据库加钱命令。
db.PlayerInfo.find({PlayerId:2949742})

每次打包完成，之后检查一下打包出来的文件。

在skinout上测试需要把打包后的都上传。
skintest上需要将mainmin,js上传。还有skin下out的东西。

1.更新 2.拷贝 3.重运行 4.删除并编译 5.打release传skintest

写完的代码要及时提交

状态的时机很关键，就是做一件事情的顺序不能错！  不然状态就会不对！流程一定要走对。


资源找不到，最重要的的要看看资源名字对不对的上！！！

接收一个项目最快最省事的是从协议入手。从上游向下游分析。

提高工作效率。早点弄好早点下班。自己把整个过程熟悉一遍，不是你的问题就找相关的人解决问题。

自己对流程熟悉，自己改就好了。

如果你没找到某一下方法或者变量，应该是变量写法。

接收一个项目最好就是从协议入手。在view层结束。协议是主线。

仔细的再走一遍流程。

git branch --set-upstream-to=origin/分支名     线上分支和线下分支重新建立联系

https://www.cnblogs.com/goloving/p/10330337.html 拉取失败的博客

git冲突 1直接revert  2 把产生冲突部分，不要的版本删除。

git的文件上的图标，可以反映出当前文件或者文件夹的状态。
　　1、正常的：绿色的对号
　　2、被修改过的：红色感叹号
　　3、新添加的：蓝色的加号
　　4、未受控的（无版本控制的）：蓝色的问号
　　5、忽略不受控的：灰色的减号
　　6、删除的：红色的x号
　　7、有冲突的：黄色的感叹号

git要学会解决冲突；手动解决完冲突，要resolve一下。再提交

revert 慎用

遇见问题，最先紧要的是解决问题，其次才是划分责任。

还原一下记得要拉取一下，开发或者打包的时候要先搞清楚分支。

有些失误是要不得的,
做东西抓住重点。

有些东西就是要你看着达不到的那种，但是你好必须做到。这就是生活，让你做到你原来做不到的事情！

现在是工作不是学习。分清楚工作和学习，工作态度不要有问题。工作就要去完成。

不只是替换个图片那么简单其中还有状态之类的变化

http://www.whs-qdcg.com/  QA服

netstat -nao | findstr 端口号  查询进程

taskkill/F /pid 进程IP   杀死进程

配置配表  和 图片资源


修改数据要在model层修改，显示效果在view层修改。


C:\Users\X-CHENGXU\Documents\youdu\100087\file  有度文档目录地址

尽量不要使用git上的 revert。先要看看本地有没有修改。

换皮不只是替换资源，还有位置大小和布局。  换皮没想象的那么简单。

按钮失效，请查看是否被遮挡，还有容器以及父容器是否设置了宽高；

容器都要设置宽高；

所有的API都是为了在合适的场景使用，如果不满足使用场景就需要自己写了。


推送先要拉取（pull）最新的，再（push）推送。注意报错信息。

git  分为提交和推送两个步骤

api和develop  一定要分两条线  develop一定要保持最新代码，每次修改都在develop开发。

如果改的是api内容，则将develop合并到api。 将来封api版本只需要提交api的web

如果开发的新功能与api无关，封develop版本则需打包develop的zip。

如果只是改了api的内容，封dev版本则不需打包


注意 更新线上之后的bug需要升级版本不要再延续上个版本了

工作中的失误  2020.9.3   记下来  避免失误；

loca里面是 通过批处理得到资源。将skin里面的资源拷贝到loca里面。

组资源只是为了在皮肤编辑器里显示。

json文件最后一个对象  不要加“，”

打包会遍历所有的增量包，如果有问题，看一下之前对应时间的增量包，是否有问题。


填写打包文件 注意空格 大小写的问题。

提交完git  要检查一下。

就按美术的效果图做，就按美术的效果图做，就按美术的效果图做。

该做的操作都要做，少的步骤以后都要补回来的。

多注意打包的问题，每次打包完之后都要检查检查。不要再出现打包的问题。

可以用git的版本比较工具。查看历史是不是有问题。

一般的问题，自己细心检查多比对，看看问题所在，绝大多数问题都能解决。

打包问题一般是自己的问题。不要急着找别人帮忙，一般情况自己就能解决。

尽量不要找别人帮忙。

自己的事情别总麻烦别人。


保持一丝怀疑，一丝质疑，意思反省。凡是都要找到原因是什么。别总别人说什么你信什么。


在程序里面一定要注意   空格  大小写  逗号  特殊字符等等。不然报错了自己都没地方修。

多阅读优秀的代码。

做事要严谨，不要走神。

细节上的问题也不是技术上的问题。

相信自己，当成一份职业，坚定的走下去。多问为什么？

多和美术策划后端沟通问问

能用公用的就用公用的   按效果图来  多问问策划美术   少干背锅返工的事
  

反常必有妖

程序不会骗人

提交公共的东西一定要先pull   不要先commit，commit一次就是产生一个新的节点，用于和线上的版本进行比较。


一个小问题多次测试肯定是自己的问题啊！ 不用心。注意力不集中，不够自信。不够用心，不够严谨。这根本怪不到别人身上。

没有用心，也不用自卑。感觉自己像个长不大的孩子。还不能独当一面。工作中的细节要完善。不要遗留问题啊！更一次又一次的，

浪费大家的时间。为什么你重写就出现bug呢？ 还是那块没做好！多发现问题多解决问题，牵扯到的方方面面的都要测试一下！


摁下葫芦起来瓢，说明你代码水平差。看自己原来写xiangshit。无论公司怎么样，你有没有做好你自己。自己该做的都没做好，

又怎么要求别人，做好自己该做的。不要乱动以前的代码，很有可能，你删除一个东西，添加一个都会引起bug。

自己改的东西操点心。这下全公司都知道自己的代码能力差了。有必要吗？

细心，用心，想好再做。专注

为什么不自己看看呢？为什么不自己试试呢？问别人再多也不如自己试试，看再多学习视频不如自己试试！！！自己试试！！！

上线版本，封板版要留下来，防止意外发生。

还是做游戏更有挑战性

快速精准理解需求，多和服务器快速沟通。自己多些健壮的代码！

坑会给人留下不靠谱的印象，稳重一点，提高效率

提供稳定可靠的输出。Git提交要减少无效提交。

做事情不要烂尾，一定要把事情做好，做完。

git 检查好再提交。不要重复无用提交，浪费时间，浪费大家时间。

push完成 show log才会有记录
git 的追踪
git branch --set-upstream-to=origin/<branch> app

听从调度，有问题及时反馈，不拖工程进度。

别那么轴，多看看人家的代码有什么操作！

机智灵活,总少一些关键步骤

接触新东西，接受能力要强，学习能能力要强

静态显示的 用setval watch监听  事件交互，用抛事件的形式传递数据和改变状态。

分步解析
顶住压力

给你发的东西看清楚
自己仔细点看看参数有没有问题。自己不要粗心。

解决冲突记得push

减少小失误，考虑全面

新做一个新的东西重视遇到奇奇怪怪的问题，不要有依赖别人的思想，首先想到的是靠自己。认真仔细多看看，灵活思考，多考虑。

也别把责任都归给别人。自己的东西自己负责

做事情要集中精力做一样，抓住重点，解决优先级最高的。

出头要明白责任，不要盲目出头

一定是在某个你不知道的地方卡住了

不注意一些细节，看着快其实为后来埋了大坑

按规定时间完成任务

细心认真看和听别人的需求和要求

做的功能要具有独立性，拿出来能反复使用

在哪发现问题，就在之前的代码断点输出。

别多管闲事，处理好自己范围内的就好。
做类型检测也是有用到

有一点点的用到也是用到

为了团队

在大城市碰的头破血流

工作从来不是抱怨

在工作中学习

低级错误才让人难以想到

接手不熟悉的东西，还是需要一定的悟性和细心

渲染速度和代码逻辑有关系。

该做的躲不掉

给领导提建议，要是可实践靠谱的建议。

不光技术，做人也很重要